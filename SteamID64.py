import requests, bs4
import json
import discord
from discord.ext import commands
import datetime
from datetime import datetime


with open('config.json') as f: 
    config = json.load(f) 



  

bot = commands.Bot(command_prefix=config['prefijo']) #Comando
bot.remove_command("help") # Borra el comando por defecto !help
api = config['Api_Steam'] #consigue la api desde este enlace: https://steamcommunity.com/dev





@bot.command()
    
async def steamid(ctx, *, steamid):
    

    
        response = requests.get(f"https://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/?key=" f"{api}" + "&vanityurl=" f"{steamid}")
       
        
        try:
         url = response.json()['response']['players'][0]['avatarfull']
        except KeyError:
                url=" "
        steam = requests.get(f"https://steamcommunity.com/id/" f"{steamid}")
        

        infoplaca = bs4.BeautifulSoup(steam.text, "lxml")

        NombrePlaca = infoplaca.select("img", class_="profile_flag")


        link =   NombrePlaca[5].get("src").replace("_full.jpg", "https://i.imgur.com/zJKj349.png")
        
        



        

        jugando = bs4.BeautifulSoup(steam.content, "html.parser")


        try:
         jugandoSteam = jugando.find("div", class_="profile_in_game_name").text

         


         jugandoSteam1 = jugando.find("div", class_="profile_in_game_header").text
          
        

        except AttributeError:
         jugandoSteam="No est√° jugando"
         

        try:


         jugandoSteam1 = jugandoSteam1.replace("In non-Steam game","En un juego que no es de Steam")
        except UnboundLocalError:
         jugandoSteam1=""

        

 
      

        try:
                steamid = response.json()['response']['steamid']
       
        except KeyError:
                steamid="No se encuentra‚ùå"
                


       
        


      

        response = requests.get(f"https://api.steampowered.com/ISteamUser/GetFriendList/v0001/?key=" + f"{api}" + "&steamid=" + f"{steamid}" + "&relationship=friend")

        
        
        
      
        

        
         

        
       
        

        

        
       

        try:
        
         totalamigos = response.json()['friendslist']['friends']
        except KeyError:
         totalamigos=""
       


        
        totalamigos=(str(len(totalamigos)))
       

        totalamigos = totalamigos.replace("0","No tiene amigos‚ùå")
        



        


      
      
        

        
        

        response = requests.get(f"https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=" +  f"{api}" + "&steamid=" + f"{steamid}" + "&format=json")


        try:
         juegos = response.json()["response"]["games"]
        except KeyError:
         juegos=""
        juegos=(str(len(juegos)))
        
        
        


        

        
 
        
        
         
         

         
        



                
        
        


        



        
            
        

        response = requests.get(f"http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=" f"{api}" + "&steamids=" f"{steamid}")
        
        

        try:
         fecha = response.json()['response']['players'][0]['timecreated']
         ts = int(fecha)
         fecha = datetime.utcfromtimestamp(ts).strftime('%d/%m/%Y %H:%M:%S')
         
   
        except KeyError:
                fecha="No se encuentra‚ùå" 


        try:
         ultimocierre = response.json()['response']['players'][0]['lastlogoff']
         ts = int(ultimocierre)
         ultimocierre = datetime.utcfromtimestamp(ts).strftime('%d/%m/%Y %H:%M:%S')
         
   
        except KeyError:
                ultimocierre="No se encuentra‚ùå" 
                

      



        try:  
         avatar = response.json()['response']['players'][0]['avatar']
        except IndexError:
                avatar=""

        
        
        try:
         estado = response.json()['response']['players'][0]['personastate']
        except IndexError:
                estado="No se encuentra‚ùå"


        try:
         usuario = response.json()['response']['players'][0]['personaname']
        except IndexError:
            usuario="No se encuentra‚ùå"
        
        
        
        try:
         bandera = response.json()['response']['players'][0]['loccountrycode']


        except KeyError:
                bandera="no se encuentra‚ùå" 

        except IndexError:
                bandera="no se encuentra‚ùå"     
      
    
 
       

        
       
        


     
        
              
                
        embed = discord.Embed(title="info usuario Steamü°∫ " f"{usuario}",  description="‚Ä¢Steam ID 64ü°∫ "f"{steamid}" "\n\n‚Ä¢Estadoü°∫ " + (str(estado).replace("0","Desconectado üî¥").replace("1","Conectado üü¢").replace("3","ausente üü†").replace("4","Conectado üü¢")+ "\n\n‚Ä¢Paisü°∫ "  + f"{bandera}".replace("AF","Afganist√°n") .replace("AL","Albania") .replace("DE","Alemania") .replace("AD", "Andorra") .replace("AO","Angola") .replace("AI","Anguila") .replace("AG","Antigua y Barbuda") .replace("AQ","Ant√°rtida") .replace("SA","Arabia Saud√≠") .replace("DZ","Argelia") .replace("AR","Argentina") .replace("AM","Armenia") .replace("AW","Aruba") .replace("AU","Australia") .replace("AT","Austria") .replace("AZ","Azerbaiy√°n") .replace("BL","BL") .replace("BQ","BQ") .replace("BS","Bahamas") .replace("BD","Banglad√©s") .replace("BB","Barbados") .replace("BZ","Belice") .replace("BJ","Ben√≠n") .replace("BM","Bermudas") .replace("BY","Bielorrusia") .replace("BO","Bolivia") .replace("BA","Bosnia y Herzegovina") .replace("BW","Botsuana") .replace("BR","Brasil") .replace("BN","Brun√©i") .replace("BG","Bulgaria") .replace("BF","Burkina Faso") .replace("BI","Burundi") .replace("BT","But√°n") .replace("BE","B√©lgica") .replace("CU","CU") .replace("CW","CW") .replace("CV","Cabo Verde") .replace("KH","Camboya") .replace("CM","Camer√∫n") .replace("CA","Canad√°") .replace("QA","Catar") .replace("TD","Chad") .replace("CL","Chile") .replace("CN","China") .replace("CY","Chipre") .replace("CO","Colombia") .replace("KM","Comoras") .replace("CG","Congo") .replace("KR","Corea del Sur") .replace("CR","Costa Rica") .replace("CI","Costa de Marfil") .replace("HR","Croacia") .replace("DK","Dinamarca") .replace("DM","Dominica") .replace("EC","Ecuador") .replace("EG","Egipto") .replace("SV","El Salvador") .replace("AE","Emiratos √Årabes Unidos") .replace("ER","Eritrea") .replace("SK","Eslovaquia") .replace("SI","Eslovenia") .replace("ES","Espa√±a") .replace("US","Estados Unidos") .replace("EE","Estonia") .replace("SZ","Esuatini") .replace("ET","Etiopia") .replace("PH","Filipinas") .replace("FI","Finlandia") .replace("FJ","Fiyi") .replace("FR","Francia") .replace("GA","Gab√≥n") .replace("GM","Gambia") .replace("GE","Georgia") .replace("GH","Ghana") .replace("GI","Gibraltar") .replace("GD","Granada") .replace("GR","Grecia") .replace("GL","Groenlandia") .replace("GP","Guadalupe") .replace("GU","Guam") .replace("GT","Guatemala") .replace("GF","Guayana Francesa") .replace("GG","Guernesey") .replace("GN","Guinea") .replace("GW","Guinea-Bis√°u") .replace("GQ","Guinea Ecuatorial") .replace("GY","Guyana") .replace("HT","Hait√≠") .replace("HN","Honduras") .replace("HK","Hong Kong") .replace("HU","Hungr√≠a") .replace("IN","India") .replace("ID","Indonesia") .replace("IQ","Irak") .replace("IE","Irlanda") .replace("IR","Ir√°n") .replace("BV","Isla Bouvet") .replace("NF","Isla Norfolk") .replace("IM","Isla de Man") .replace("CX","Isla de Navidad") .replace("IS","Islandia") .replace("AX","Islas Aland") .replace("KY","Islas Caim√°n") .replace("CC","Islas Cocos") .replace("CK","Islas Cook") .replace("FO","Islas Feroe") .replace("GS","Islas Georgias del Sur y Sandwich del Sur") .replace("HM","Islas Heard y Mc Donald") .replace("FK","Islas Malvinas") .replace("MP","Islas Marianas del Norte") .replace("MH","Islas Marshall") .replace("PN","Islas Pitcairn") .replace("SB","Islas Salom√≥n") .replace("TC","Islas Turcas y Caicos") .replace("UM","Islas Ultramarinas Menores de Estados Unidos") .replace("VG","Islas V√≠rgenes Brit√°nicas") .replace("VI","Islas V√≠rgenes de los Estados Unidos") .replace("IL","Israel") .replace("IT","Italia") .replace("JM","Jamaica") .replace("JP","Jap√≥n") .replace("JE","Jersey") .replace("JO","Jordania") .replace("KZ","Kazajist√°n") .replace("KE","Kenia") .replace("KG","Kirguist√°n") .replace("KI","Kiribati") .replace("XK","Kosovo") .replace("KW","Kuwait") .replace("LA","Laos") .replace("LS","Lesoto") .replace("LV","Letonia") .replace("LR","Liberia") .replace("LY","Libia") .replace("LI","Liechtenstein") .replace("LT","Lituania") .replace("LU","Luxemburgo") .replace("LB","L√≠bano") .replace("MF","MF") .replace("MO","Macao") .replace("MK","Macedonia del Norte") .replace("MG","Madagascar") .replace("MY","Malasia") .replace("MW","Malaui") .replace("MV","Maldivas") .replace("ML","Mali") .replace("MT","Malta") .replace("MA","Marruecos") .replace("MQ","Martinica") .replace("MU","Mauricio") .replace("MR","Mauritania") .replace("YT","Mayotte") .replace("FM","Micronesia") .replace("MD","Moldavia") .replace("MN","Mongolia") .replace("ME","Montenegro") .replace("MS","Montserrat") .replace("MZ","Mozambique") .replace("MM","Myanmar") .replace("MX","M√©xico") .replace("MC","M√≥naco") .replace("NA","Namibia") .replace("NR","Nauru") .replace("NP","Nepal") .replace("NI","Nicaragua") .replace("NG","Nigeria") .replace("NU","Niue") .replace("NO","Noruega") .replace("NC","Nueva Caledonia") .replace("NZ","Nueva Zelanda") .replace("NE","N√≠ger") .replace("OM","Om√°n") .replace("PK","Pakist√°n") .replace("PW","Palaos") .replace("PS","Palestina") .replace("PA","Panam√°") .replace("PG","Pap√∫a Nueva Guinea") .replace("PY","Paraguay") .replace("NL","Pa√≠ses Bajos") .replace("PE","Per√∫") .replace("PF","Polinesia Francesa") .replace("PL","Polonia") .replace("PT","Portugal") .replace("PR","Puerto Rico") .replace("GB","Reino Unido") .replace("BH","Reino de Bar√©in") .replace("CF","Rep√∫blica Centroafricana") .replace("CZ","Rep√∫blica Checa") .replace("CD","Rep√∫blica Democr√°tica del Congo") .replace("DO","Rep√∫blica Dominicana") .replace("RE","Reuni√≥n") .replace("RW","Ruanda") .replace("RO","Ruman√≠a") .replace("RU","Rusia") .replace("SS","SS") .replace("SX","SX") .replace("WS","Samoa") .replace("AS","Samoa Americana") .replace("KN","San Crist√≥bal y Nieves") .replace("SM","San Marino") .replace("PM","San Pedro y Miquel√≥n") .replace("VC","San Vicente y las Granadinas") .replace("SH","Santa Elena") .replace("LC","Santa Luc√≠a") .replace("VA","Santa Sede") .replace("ST","Santo Tom√© y Pr√≠ncipe") .replace("SN","Senegal") .replace("RS","Serbia") .replace("SC","Seychelles") .replace("SL","Sierra Leona") .replace("SG","Singapur") .replace("SY","Siria") .replace("SO","Somalia") .replace("LK","Sri Lanka") .replace("ZA","Sud√°frica") .replace("SD","Sud√°n") .replace("SE","Suecia") .replace("CH","Suiza") .replace("SR","Surinam") .replace("SJ","Svalbard y Jan Mayen") .replace("EH","S√°hara Occidental") .replace("TH","Tailandia") .replace("TW","Taiw√°n") .replace("TZ","Tanzania") .replace("TJ","Tayikist√°n") .replace("IO","Territorio Brit√°nico del Oc√©ano √çndico") .replace("TF","Territorios Australes Franceses") .replace("TL","Timor Oriental") .replace("TG","Togo") .replace("TK","Tokelau") .replace("TO","Tonga") .replace("TT","Trinidad y Tobago") .replace("TM","Turkmenist√°n") .replace("TR","Turqu√≠a") .replace("TV","Tuvalu") .replace("TN","T√∫nez") .replace("UA","Ucrania") .replace("UG","Uganda") .replace("UY","Uruguay") .replace("UZ","Uzbekist√°n") .replace("VU","Vanuatu") .replace("VE","Venezuela") .replace("VN","Vietnam") .replace("WF","Wallis y Futuna") .replace("YE","Yemen") .replace("DJ","Yibuti") .replace("ZM","Zambia") .replace("ZW","Zimbabue").replace("KP","korea") + "\n\n‚Ä¢Creadoü°∫ " + f"{fecha}" + "\n\n‚Ä¢√∫ltimo cierre de sesionü°∫ " + f"{ultimocierre}" + "\n\n‚Ä¢Jugandoü°∫ " +jugandoSteam+ jugandoSteam1.replace("Currently In-Game"," ") + "\n\n‚Ä¢Total Amigosü°∫ " + totalamigos) + "\n\n‚Ä¢Juegos Totalesü°∫ " + juegos, color=discord.Color.random())
        

        embed.set_thumbnail(url=f"{avatar}")
        
        embed.set_author(name="steam", icon_url=link)
        
        
        await ctx.send(embed=embed)


        
        
        
        

            
        
 
 
 
@bot.event
async def on_ready():
    print("BOT listo!")
    
 
    
bot.run(config['Token_BOT']) #OBTEN UN TOKEN EN: https://discord.com/developers/applications
